import random
import string
from uuid import UUID

from assimilator.core.database import UnitOfWork, BaseRepository

from dependencies import create_unit_of_work
from examples.redis.database.models import RedisUser


def create_user(username: str, email: str, balance: float, uow: UnitOfWork) -> UUID:
    with uow:
        new_user = RedisUser(username=username, email=email, balance=balance)
        uow.repository.save(new_user)
        uow.commit()
        return new_user.id      # id generated by default. But, we can change that behaviour if we need


def read_user(id: UUID, repository: BaseRepository) -> RedisUser:
    return repository.get(repository.specs.filter(id))


def buy_product(user_id: UUID, product_price: int, uow: UnitOfWork):
    with uow:
        found_user = read_user(id=user_id, repository=uow.repository)

        found_user.balance -= product_price
        uow.repository.update(found_user)
        uow.commit()


def refresh_user(old_user: RedisUser, repository: BaseRepository) -> RedisUser:
    repository.refresh(old_user)
    return old_user


def create_many_users(uow):
    with uow:
        for i in range(100):
            new_user = RedisUser(
                username="".join(random.sample(string.ascii_letters, 10)),
                email=f"{''.join(random.sample(string.ascii_letters, 10))}@gmail.com",
                balance=random.randint(0, 100),
            )
            uow.repository.save(new_user)

        uow.commit()    # Commit is only called once!


def filter_users(repository: BaseRepository, **filters):
    return repository.filter(repository.specs.filter(**filters))


if __name__ == '__main__':
    new_user_id = create_user(
        username="Andrey",
        email="python.on.papyrus@gmail.com",
        balance=1000,
        uow=create_unit_of_work(),
    )

    print(f"User with '{new_user_id}' was created")

    user = read_user(
        id=new_user_id,
        repository=create_unit_of_work().repository,
    )
    print("User returned from Redis:", user)

    buy_product(user_id=new_user_id, product_price=100, uow=create_unit_of_work())

    updated_user = refresh_user(user, repository=create_unit_of_work().repository)
    print("User balance after product purchase:", updated_user.balance)

    create_many_users(create_unit_of_work())

    print(filter_users(repository=create_unit_of_work().repository, balance__gt=90))
